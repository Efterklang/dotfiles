import json
import re
import os
from pathlib import Path

def get_file_size(file_path):
    """获取文件大小（字节）"""
    return os.path.getsize(file_path)

def minify_json_file(input_path, output_path=None, overwrite=False):
    """
    压缩JSON文件

    :param input_path: 输入文件路径
    :param output_path: 输出文件路径（可选）
    :param overwrite: 是否覆盖原文件
    :return: 节省的字节数
    """
    try:
        original_size = get_file_size(input_path)

        with open(input_path, 'r', encoding='utf-8') as f:
            data = json.load(f)

        minified_json = json.dumps(data, separators=(',', ':'))

        if overwrite or output_path is None:
            output_path = input_path

        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(minified_json)

        new_size = get_file_size(output_path)
        saved = original_size - new_size

        print(f"压缩成功: {input_path} (节省: {saved} 字节, 原大小: {original_size} -> 新大小: {new_size})")
        return saved

    except Exception as e:
        print(f"处理文件 {input_path} 时出错: {str(e)}")
        return 0

def find_and_minify_json_files(path_pattern, output_dir=None, overwrite=False):
    """
    使用正则表达式查找并压缩JSON文件

    :param path_pattern: 文件路径的正则表达式模式
    :param output_dir: 输出目录（可选）
    :param overwrite: 是否覆盖原文件
    :return: 总节省的字节数，处理的文件数
    """
    regex = re.compile(path_pattern)
    total_saved = 0
    files_processed = 0

    # 确保输出目录存在
    if output_dir and not os.path.exists(output_dir):
        os.makedirs(output_dir)

    # 遍历当前目录及子目录
    for root, _, files in os.walk('.'):
        for file in files:
            file_path = Path(root) / file
            if regex.search(str(file_path)) and file.lower().endswith('.json'):
                if output_dir:
                    output_path = Path(output_dir) / file_path.name
                    saved = minify_json_file(file_path, output_path, overwrite=False)
                else:
                    saved = minify_json_file(file_path, overwrite=overwrite)

                total_saved += saved
                files_processed += 1

    return total_saved, files_processed

def format_size(size_bytes):
    """格式化文件大小"""
    for unit in ['B', 'KB', 'MB', 'GB']:
        if size_bytes < 1024.0:
            return f"{size_bytes:.2f} {unit}"
        size_bytes /= 1024.0
    return f"{size_bytes:.2f} TB"

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="JSON文件压缩工具")
    parser.add_argument("pattern", help="匹配文件路径的正则表达式模式")
    parser.add_argument("-o", "--output", help="输出目录（如果不覆盖原文件）")
    parser.add_argument("-w", "--overwrite", action="store_true",
                        help="覆盖原文件（慎用）")

    args = parser.parse_args()

    print(f"开始查找并压缩匹配模式 '{args.pattern}' 的JSON文件...")
    total_saved, files_processed = find_and_minify_json_files(args.pattern, args.output, args.overwrite)

    print("\n处理结果统计:")
    print(f"处理的文件总数: {files_processed}")
    print(f"总共节省的空间: {total_saved} 字节 ({format_size(total_saved)})")
    print("处理完成！")