#!/usr/bin/env python3
"""
Rclone交互式同步工具
用于管理Cloudflare R2 Bucket与本地文件夹的同步操作
"""

import os
import subprocess
from pathlib import Path
from typing import List, Optional


class Colors:
    """终端颜色定义"""

    HEADER = "\033[95m"
    OKBLUE = "\033[94m"
    OKCYAN = "\033[96m"
    OKGREEN = "\033[92m"
    WARNING = "\033[93m"
    FAIL = "\033[91m"
    ENDC = "\033[0m"
    BOLD = "\033[1m"
    UNDERLINE = "\033[4m"


class RcloneManager:
    """Rclone操作管理类"""

    def __init__(self):
        self.remotes: List[str] = []
        self.current_remote: Optional[str] = None
        self.current_bucket: Optional[str] = None
        self.local_directory: Optional[str] = None

    def print_header(self, text: str):
        """打印标题"""
        print(f"\n{Colors.HEADER}{Colors.BOLD}{'=' * 50}")
        print(f"{text}")
        print(f"{'=' * 50}{Colors.ENDC}")

    def print_success(self, text: str):
        """打印成功信息"""
        print(f"{Colors.OKGREEN}✓ {text}{Colors.ENDC}")

    def print_warning(self, text: str):
        """打印警告信息"""
        print(f"{Colors.WARNING}⚠ {text}{Colors.ENDC}")

    def print_error(self, text: str):
        """打印错误信息"""
        print(f"{Colors.FAIL}✗ {text}{Colors.ENDC}")

    def print_info(self, text: str):
        """打印信息"""
        print(f"{Colors.OKCYAN}ℹ {text}{Colors.ENDC}")

    def check_rclone_installed(self) -> bool:
        """检查rclone是否已安装"""
        try:
            result = subprocess.run(
                ["rclone", "version"], capture_output=True, text=True, check=True
            )
            version_line = result.stdout.split("\n")[0]
            self.print_success(f"Rclone已安装: {version_line}")
            return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            self.print_error("Rclone未安装或不在PATH中")
            self.print_info("请先安装rclone: https://rclone.org/downloads/")
            return False

    def get_remotes(self) -> List[str]:
        """获取已配置的远程存储"""
        try:
            result = subprocess.run(
                ["rclone", "listremotes"], capture_output=True, text=True, check=True
            )
            remotes = [
                remote.strip(":")
                for remote in result.stdout.strip().split("\n")
                if remote
            ]
            self.remotes = remotes
            return remotes
        except subprocess.CalledProcessError as e:
            self.print_error(f"获取远程存储列表失败: {e}")
            return []

    def select_remote(self) -> bool:
        """选择远程存储"""
        remotes = self.get_remotes()

        if not remotes:
            self.print_warning("未找到已配置的远程存储")
            if self.ask_yes_no("是否需要配置新的远程存储?"):
                self.configure_remote()
                remotes = self.get_remotes()

        if not remotes:
            return False

        self.print_info("可用的远程存储:")
        for i, remote in enumerate(remotes, 1):
            print(f"  {i}. {remote}")

        while True:
            try:
                choice = input(f"\n请选择远程存储 (1-{len(remotes)}): ").strip()
                index = int(choice) - 1
                if 0 <= index < len(remotes):
                    self.current_remote = remotes[index]
                    self.print_success(f"已选择远程存储: {self.current_remote}")
                    return True
                else:
                    self.print_error("选择无效，请重新输入")
            except ValueError:
                self.print_error("请输入有效的数字")

    def configure_remote(self):
        """配置新的远程存储"""
        self.print_info("启动rclone配置向导...")
        subprocess.run(["rclone", "config"])

    def list_buckets(self) -> List[str]:
        """列出bucket"""
        if not self.current_remote:
            return []

        try:
            result = subprocess.run(
                ["rclone", "lsd", f"{self.current_remote}:"],
                capture_output=True,
                text=True,
                check=True,
            )
            buckets = []
            for line in result.stdout.strip().split("\n"):
                if line.strip():
                    # 解析bucket名称（假设格式为日期+时间+名称）
                    parts = line.split()
                    if len(parts) >= 5:
                        bucket_name = parts[-1]
                        buckets.append(bucket_name)
            return buckets
        except subprocess.CalledProcessError as e:
            self.print_error(f"获取bucket列表失败: {e}")
            return []

    def select_bucket(self) -> bool:
        """选择bucket"""
        buckets = self.list_buckets()

        if not buckets:
            self.print_warning("未找到任何bucket")
            bucket_name = input("请输入bucket名称: ").strip()
            if bucket_name:
                self.current_bucket = bucket_name
                return True
            return False

        self.print_info("可用的bucket:")
        for i, bucket in enumerate(buckets, 1):
            print(f"  {i}. {bucket}")

        print(f"  {len(buckets) + 1}. 手动输入bucket名称")

        while True:
            try:
                choice = input(f"\n请选择bucket (1-{len(buckets) + 1}): ").strip()
                index = int(choice) - 1

                if 0 <= index < len(buckets):
                    self.current_bucket = buckets[index]
                    self.print_success(f"已选择bucket: {self.current_bucket}")
                    return True
                elif index == len(buckets):
                    bucket_name = input("请输入bucket名称: ").strip()
                    if bucket_name:
                        self.current_bucket = bucket_name
                        self.print_success(f"已设置bucket: {self.current_bucket}")
                        return True
                else:
                    self.print_error("选择无效，请重新输入")
            except ValueError:
                self.print_error("请输入有效的数字")

    def select_local_directory(self) -> bool:
        """选择本地目录"""
        self.print_info("请选择本地同步目录:")

        # 建议一些常用目录
        suggestions = [
            str(Path.home() / "Downloads" / "r2_sync"),
            str(Path.home() / "Documents" / "r2_sync"),
            str(Path.cwd() / "r2_sync"),
        ]

        print("建议的目录:")
        for i, path in enumerate(suggestions, 1):
            exists = "✓" if Path(path).exists() else "✗"
            print(f"  {i}. {path} {exists}")

        print(f"  {len(suggestions) + 1}. 自定义路径")

        while True:
            try:
                choice = input(f"\n请选择 (1-{len(suggestions) + 1}): ").strip()
                index = int(choice) - 1

                if 0 <= index < len(suggestions):
                    self.local_directory = suggestions[index]
                    break
                elif index == len(suggestions):
                    custom_path = input("请输入自定义路径: ").strip()
                    if custom_path:
                        self.local_directory = os.path.expanduser(custom_path)
                        break
                else:
                    self.print_error("选择无效，请重新输入")
            except ValueError:
                self.print_error("请输入有效的数字")

        # 创建目录（如果不存在）
        Path(self.local_directory).mkdir(parents=True, exist_ok=True)
        self.print_success(f"本地目录: {self.local_directory}")
        return True

    def ask_yes_no(self, question: str) -> bool:
        """询问是否操作"""
        while True:
            answer = input(f"{question} (y/N): ").strip().lower()
            if answer in ["y", "yes"]:
                return True
            elif answer in ["n", "no", ""]:
                return False
            else:
                self.print_error("请输入 y 或 n")

    def run_rclone_command(self, args: List[str], dry_run: bool = False) -> bool:
        """运行rclone命令"""
        if dry_run:
            args.append("--dry-run")

        self.print_info(f"执行命令: rclone {' '.join(args)}")

        try:
            result = subprocess.run(["rclone"] + args, check=True)
            return result.returncode == 0
        except subprocess.CalledProcessError as e:
            self.print_error(f"命令执行失败: {e}")
            return False

    def sync_from_remote(self, dry_run: bool = False) -> bool:
        """从远程同步到本地"""
        if not all([self.current_remote, self.current_bucket, self.local_directory]):
            self.print_error("配置不完整")
            return False

        remote_path = f"{self.current_remote}:{self.current_bucket}"

        self.print_header(f"从 {remote_path} 同步到本地")

        if dry_run:
            self.print_warning("这是预览模式，不会实际执行操作")

        args = ["sync", remote_path, self.local_directory, "-v"]
        return self.run_rclone_command(args, dry_run)

    def sync_to_remote(
        self, delete_excluded: bool = False, dry_run: bool = False
    ) -> bool:
        """从本地同步到远程"""
        if not all([self.current_remote, self.current_bucket, self.local_directory]):
            self.print_error("配置不完整")
            return False

        remote_path = f"{self.current_remote}:{self.current_bucket}"

        self.print_header(f"从本地同步到 {remote_path}")

        if delete_excluded:
            self.print_warning("启用删除模式：远程不存在的文件将被删除")

        if dry_run:
            self.print_warning("这是预览模式，不会实际执行操作")

        args = ["sync", self.local_directory, remote_path, "-v"]
        if delete_excluded:
            args.append("--delete-excluded")

        return self.run_rclone_command(args, dry_run)

    def list_local_files(self):
        """列出本地文件"""
        if not self.local_directory:
            return

        self.print_header("本地文件列表")

        local_path = Path(self.local_directory)
        if not local_path.exists():
            self.print_warning("本地目录不存在")
            return

        for item in sorted(local_path.rglob("*")):
            if item.is_file():
                rel_path = item.relative_to(local_path)
                size = item.stat().st_size
                print(f"  📄 {rel_path} ({self.format_size(size)})")
            elif item.is_dir() and item != local_path:
                rel_path = item.relative_to(local_path)
                print(f"  📁 {rel_path}/")

    def list_remote_files(self):
        """列出远程文件"""
        if not all([self.current_remote, self.current_bucket]):
            return

        remote_path = f"{self.current_remote}:{self.current_bucket}"
        self.print_header(f"远程文件列表: {remote_path}")

        try:
            result = subprocess.run(
                ["rclone", "ls", remote_path],
                capture_output=True,
                text=True,
                check=True,
            )

            if result.stdout.strip():
                for line in result.stdout.strip().split("\n"):
                    if line.strip():
                        parts = line.strip().split()
                        if len(parts) >= 2:
                            size = int(parts[0])
                            filename = " ".join(parts[1:])
                            print(f"  📄 {filename} ({self.format_size(size)})")
            else:
                self.print_info("远程bucket为空")

        except subprocess.CalledProcessError as e:
            self.print_error(f"获取远程文件列表失败: {e}")

    def format_size(self, size: int) -> str:
        """格式化文件大小"""
        for unit in ["B", "KB", "MB", "GB", "TB"]:
            if size < 1024.0:
                return f"{size:.1f} {unit}"
            size /= 1024.0
        return f"{size:.1f} PB"

    def delete_local_files_interactive(self):
        """交互式删除本地文件"""
        if not self.local_directory:
            return

        local_path = Path(self.local_directory)
        if not local_path.exists():
            self.print_warning("本地目录不存在")
            return

        self.print_header("交互式删除本地文件")
        self.print_warning("请谨慎操作，删除的文件无法恢复！")

        files = list(local_path.rglob("*"))
        files = [f for f in files if f.is_file()]

        if not files:
            self.print_info("本地目录为空")
            return

        deleted_count = 0
        for file_path in sorted(files):
            rel_path = file_path.relative_to(local_path)
            size = file_path.stat().st_size

            print(f"\n📄 {rel_path} ({self.format_size(size)})")
            if self.ask_yes_no("删除此文件?"):
                try:
                    file_path.unlink()
                    self.print_success(f"已删除: {rel_path}")
                    deleted_count += 1
                except Exception as e:
                    self.print_error(f"删除失败: {e}")

        self.print_success(f"共删除 {deleted_count} 个文件")

    def show_main_menu(self):
        """显示主菜单"""
        while True:
            self.print_header("Rclone 交互式同步工具")

            print("当前配置:")
            print(f"  远程存储: {self.current_remote or '未设置'}")
            print(f"  Bucket: {self.current_bucket or '未设置'}")
            print(f"  本地目录: {self.local_directory or '未设置'}")

            print(f"\n{Colors.OKBLUE}操作选项:{Colors.ENDC}")
            print("  1. 选择远程存储[Required]")
            print("  2. 选择bucket[Required]")
            print("  3. 选择本地目录")
            print("  4. 从远程同步到本地")
            print("  5. 从本地同步到远程")
            print("  6. 从本地同步到远程 (删除模式)")
            print("  7. 查看本地文件")
            print("  8. 查看远程文件")
            print("  9. 交互式删除本地文件")
            print("  10. 预览同步操作")
            print("  0. 退出")

            choice = input("\n请选择操作 (0-10): ").strip()

            if choice == "0":
                print("再见！")
                break
            elif choice == "1":
                self.select_remote()
            elif choice == "2":
                if self.current_remote:
                    self.select_bucket()
                else:
                    self.print_warning("请先配置远程存储")
            elif choice == "3":
                self.select_local_directory()
            elif choice == "4":
                if self.ask_yes_no("确认从远程同步到本地?"):
                    self.sync_from_remote()
            elif choice == "5":
                if self.ask_yes_no("确认从本地同步到远程?"):
                    self.sync_to_remote()
            elif choice == "6":
                self.print_warning("删除模式将删除远程不存在的文件！")
                if self.ask_yes_no("确认执行删除模式同步?"):
                    self.sync_to_remote(delete_excluded=True)
            elif choice == "7":
                self.list_local_files()
            elif choice == "8":
                self.list_remote_files()
            elif choice == "9":
                self.delete_local_files_interactive()
            elif choice == "10":
                print("\n预览选项:")
                print("  1. 预览从远程同步到本地")
                print("  2. 预览从本地同步到远程")
                print("  3. 预览从本地同步到远程 (删除模式)")

                preview_choice = input("请选择预览类型 (1-3): ").strip()
                if preview_choice == "1":
                    self.sync_from_remote(dry_run=True)
                elif preview_choice == "2":
                    self.sync_to_remote(dry_run=True)
                elif preview_choice == "3":
                    self.sync_to_remote(delete_excluded=True, dry_run=True)
            else:
                self.print_error("无效的选择")

            input("\n按回车键继续...")

    def run(self):
        """运行主程序"""
        self.print_header("Rclone 交互式同步工具")

        # 检查rclone是否安装
        if not self.check_rclone_installed():
            return

        # 显示主菜单
        self.show_main_menu()


def main():
    """主函数"""
    try:
        manager = RcloneManager()
        manager.run()
    except KeyboardInterrupt:
        print(f"\n{Colors.WARNING}操作被用户中断{Colors.ENDC}")
    except Exception as e:
        print(f"{Colors.FAIL}发生错误: {e}{Colors.ENDC}")


if __name__ == "__main__":
    main()
